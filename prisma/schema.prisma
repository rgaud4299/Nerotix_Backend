generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== ENUMS =====
enum Role {
  Admin
  User
  Employee
}

enum Status {
  Active
  Inactive

}

enum UserStatus {
  Active
  Inactive
  Banned
}

enum OtpStatus {
  Verified
  Unverified
}

enum YesNo {
  Yes
  No
}

enum TokenStatus {
  Active
  Inactive
  Expired
}

enum CurrencyEnum {
  INR
  USD
  EUR
  GBP
}
enum HttpMethod {
  GET
  POST
}

enum LoginStatus {
  Success
  Failed
}


// âœ… Models
model users {
  id                 BigInt       @id @default(autoincrement())
  uuid               String       @unique @db.VarChar(190)
  name               String       @db.VarChar(190)
  company_name       String?      @db.VarChar(255)
  email              String       @unique @db.VarChar(190)
  mobile_no          String       @unique @db.VarChar(12)
  password           String       @db.VarChar(255)
  mpin               String?      @db.VarChar(100)
  profile_image      String?      @db.VarChar(255)

  role               Role         @default(User)
  status             UserStatus       @default(Active)
  otp_status         OtpStatus    @default(Verified)

  last_login_at      DateTime?    @db.Timestamp(6)
  created_at         DateTime     @db.Timestamp(6)
  updated_at         DateTime     @db.Timestamp(6)
  mobile_verified_at DateTime?    @db.Timestamp(6)
  email_verified_at  DateTime?    @db.Timestamp(6)
  delete_status      Int          @default(0)
  deleted_at         DateTime?    @db.Timestamp(6)
  remember_token     String?      @db.VarChar(100)

  wallets            wallets?
  tokens             user_tokens[]
  webhooks           webhooks[]
  user_ip_whitelist  user_ip_whitelist[]
}

model temp_users {
  id                 BigInt     @id @default(autoincrement())
  name               String     @db.VarChar(190)
  email              String     @unique @db.VarChar(190)
  password           String     @db.VarChar(255)
  mobile_no          String     @db.VarChar(20)
  created_at         DateTime?  @db.Timestamp(6)
  updated_at         DateTime?  @db.Timestamp(6)
  email_otp          String?    @db.VarChar(10)
  mobile_otp         String?    @db.VarChar(10)
  is_email_verified  Boolean?   @default(false)
  is_mobile_verified Boolean?   @default(false)
}


model otp_verifications {
  id          BigInt        @id @default(autoincrement())
  otp         Int           
  expires_at  DateTime    @db.Timestamp(6)
  is_verified Boolean?    @default(false)
  created_at  DateTime    @db.Timestamp(6)
  updated_at  DateTime?   @db.Timestamp(6)
  user_id     BigInt?
  type        String?  

  @@index([user_id, type], map: "idx_user_id_type")
}

model audit_trail {
  id          BigInt    @id @default(autoincrement())
  table_name  String    @db.VarChar(255)
  row_id      BigInt
  action      String    @db.VarChar(20)
  created_by  BigInt?
  created_at  DateTime? @db.Timestamp(6)
  updated_by  BigInt?
  updated_at  DateTime? @db.Timestamp(6)
  approved_by BigInt?
  approved_at DateTime? @db.Timestamp(6)
  verified_by BigInt?
  verified_at DateTime? @db.Timestamp(6)
  rejected_by BigInt?
  rejected_at DateTime? @db.Timestamp(6)
  deleted_by  BigInt?
  deleted_at  DateTime? @db.Timestamp(6)
  ip_address  String?   @db.VarChar(45)
  latitude    Decimal?  @db.Decimal(10, 7)
  longitude   Decimal?  @db.Decimal(10, 7)
  remark      String?
  status      String?
}

model login_history {
  id               BigInt    @id @default(autoincrement())
  device           String?   @db.VarChar(190)
  operating_system String?   @db.VarChar(190)
  browser          String?   @db.VarChar(190)
  ip_address       String?   @db.VarChar(50)
  latitude         Decimal?  @db.Decimal(10, 7)
  longitude        Decimal?  @db.Decimal(10, 7)
  location         String?
  status           LoginStatus?
  user_agent       String?
  created_at       DateTime? @db.Timestamp(6)
  updated_at       DateTime? @db.Timestamp(6)
  user_id          BigInt?
}

model msg_apis {
  id         BigInt     @id @default(autoincrement())
  api_name   String     @db.VarChar(255)
  api_type   String
  base_url   String
  params     String?
  method     HttpMethod
  status     Status
  created_at DateTime   @db.Timestamp(6)
  updated_at DateTime   @db.Timestamp(6)
  
  msg_logs   msg_logs[]
}

model msg_contents {
  id                   BigInt      @id @default(autoincrement())
  message_type         String?  @db.VarChar(255)
  send_sms             YesNo    @default(Yes)
  send_whatsapp        YesNo    @default(Yes)
  send_email           YesNo    @default(Yes)
  send_notification    YesNo    @default(No)
  sms_template_id      String?  @db.VarChar(255)
  sms_content          String?
  whatsapp_content     String?
  mail_subject         String?  @db.VarChar(255)
  mail_content         String?
  notification_title   String?  @db.VarChar(255)
  notification_content String?
  keywords             String?
  created_at           DateTime @db.Timestamp(6)
  updated_at           DateTime @db.Timestamp(6)
  
}

model msg_logs {
  id           BigInt   @id @default(autoincrement())
  api_id       BigInt
  numbers      String
  message      String
  base_url     String
  params       String
  api_response String
  created_at   DateTime @db.Timestamp(6)
  updated_at   DateTime @db.Timestamp(6)

  msg_apis     msg_apis @relation(fields: [api_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_msg_logs_api")
}



// ===== MODELS =====
model msg_signature {
  id             BigInt   @id @default(autoincrement())
  signature_type String   @db.VarChar(10)
  signature      String
  status         Status   @default(Active)
  created_at     DateTime @db.Timestamp(6)
  updated_at     DateTime @db.Timestamp(6)
}



model product_categories {
  id         BigInt     @id @default(autoincrement())
  name       String     @unique @db.VarChar(100)
  slug       String     @unique @db.VarChar(100)
  status     Status?    @default(Active)
  created_at DateTime?  @db.Timestamp(6)
  updated_at DateTime?  @db.Timestamp(6)
  
  products   products[]
}

model product_pricing {
  id         BigInt    @id @default(autoincrement())
  product_id BigInt
  price      Decimal   @db.Decimal(10, 2)
  currency   String?   @default("INR") @db.VarChar(10)
  created_at DateTime? @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  products   products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model products {
  id                 BigInt               @id @default(autoincrement())
  category_id        BigInt
  name               String               @db.VarChar(100)
  slug               String               @unique @db.VarChar(100)
  description        String?
  icon               String?              @db.VarChar(255)
  status             Status?              @default(Active)
  created_at         DateTime?            @db.Timestamp(6)
  updated_at         DateTime?            @db.Timestamp(6)
  product_pricing    product_pricing[]
  product_categories product_categories   @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  service_switchings service_switchings[]

  @@unique([category_id, name], map: "unique_category_name")
}

model service_switchings {
  id                   BigInt   @id @default(autoincrement())
  api_id               BigInt
  product_id           BigInt
  api_code             String   @db.VarChar(50)
  rate                 String   @db.VarChar(10)
  commission_surcharge String   @db.VarChar(50)
  flat_per             String   @db.VarChar(50)
  gst                  Int
  tds                  Int
  txn_limit            Int
  status               Status   @default(Active)
  created_at           DateTime @db.Timestamp(6)
  updated_at           DateTime @db.Timestamp(6)
  apis                 apis     @relation(fields: [api_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_api")
  products             products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product")
}



model wallets {
  id                BigInt       @id @default(autoincrement())
  user_id           BigInt    @unique
  balance           Float?    @default(0.0)
  lien_balance      Float?    @default(0.0)
  free_balance      Float?    @default(100.0)
  balance_expire_at DateTime  @db.Timestamp(6)
  created_at        DateTime? @db.Timestamp(6)
  updated_at        DateTime? @db.Timestamp(6)
  users             users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}


model webhooks {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  url        String?
  event      String?  @db.VarChar(100)
  secret_key String?  @db.VarChar(255)
  status     Status   @default(Active)
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}


model user_ip_whitelist {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  ip_address String   @db.VarChar(45)
  status     Status   @default(Inactive)
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}


model user_tokens {
  id         BigInt      @id @default(autoincrement())
  user_id    BigInt
  token      String        @unique
  token_type String      @db.VarChar(10)
  expires_at DateTime?   @db.Timestamp(6)
  status     TokenStatus @default(Inactive)
  created_at DateTime    @default(now()) @db.Timestamp(6)
  updated_at DateTime?   @default(now()) @db.Timestamp(6)
  
  user       users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}


model apis {
  id                 BigInt               @id @default(autoincrement())
  api_name           String               @db.VarChar
  api_type           String               @db.VarChar
  remain_balance     String?              @db.VarChar(50)
  pending_txn_limit  Int?
  auth_key1          String?
  auth_value1        String?
  auth_key2          String?
  auth_value2        String?
  auth_key3          String?
  auth_value3        String?
  auth_key4          String?
  auth_value4        String?
  auth_key5          String?
  auth_value5        String?
  auth_key6          String?
  auth_value6        String?
  auto_status_check  Status?              @default(Inactive)
  status             Status?              @default(Inactive)
  deleted            YesNo?               @default(No)
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  updated_at         DateTime?            @default(now()) @db.Timestamp(6)
  deleted_at         DateTime?            @db.Timestamp(6)
  service_switchings service_switchings[]
}
